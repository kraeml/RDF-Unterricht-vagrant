# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile for {{year}} and lesson {{lesson.name}}

{% if lesson.shell %}
# Combined with a little bit more Ruby, this makes it very easy to embed your
# shell scripts directly within your Vagrantfile.
# I understand that if you are not familiar with Ruby, the above may seem very
# advanced or foreign. But do not fear, what it is doing is quite simple:
#   the script is assigned to a global variable $script. This global variable
#   contains a string which is then passed in as the inline script to the Vagrant configuration.
# This script is used later and run always
$script = <<SHELL
   sudo su vagrant -c '/usr/local/lib/npm/bin/pm2 restart all'
SHELL
{% endif %}
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "{{lesson.default_box}}"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Falls vbguest-plugin bitte Guest nachladen
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = true
  end

{% if lesson.forwarded_ports %}
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  {% for port in lesson.forwarded_ports %}
{{port.comment}}
  config.vm.network "forwarded_port", guest: {{port.guest}}, host: {{port.host}}
  {% endfor %}
{% endif %}

{% if lesson.private_ip %}
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "{{lesson.private_ip}}"
{% endif %}

{% if lesson.public_network %}
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"
{% endif %}

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "projekte", "/home/vagrant/www"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
{% if lesson.gui %}
     # Display the VirtualBox GUI when booting the machine
     vb.gui = true
{% endif %}

{% if lesson.memory %}
     # Customize the amount of memory on the VM:
     vb.memory = "{{lesson.memory}}"
{% endif %}
{% if lesson.cpus %}
     vb.customize ["modifyvm", :id, "--cpus", {{lesson.cpus}}]
{% endif %}
     vb.name = "{{lesson.name}}"
{% if lesson.cpu_cap %}
     vb.customize ["modifyvm", :id, "--cpuexecutioncap", "{{lesson.cpu_cap}}"]
{% endif %}
     vb.linked_clone = true if Vagrant::VERSION =~ /^1.8/
   end

{% if lesson.shell %}
  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: $script, run: "always"
{% endif %}
end
